<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>机器学习开篇</title>
    <url>/2020/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>　　今天是2020年3月29号，最近开始跟着吴恩达老师入门机器学习，以后就在这里记录一下自己学习历程，<br>写出来的内容完全只是个人收获或感悟，所以肯定有不少错误存在，单纯记录下。<br>　　好了，就这样吧，加油！</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习(1)单变量线性回归及梯度下降</title>
    <url>/2020/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(1)%E5%8D%95%E5%8F%98%E9%87%8F%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8A%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#<img src="/images/%E6%A0%B8%E5%BF%83%E5%85%AC%E5%BC%8F.png" alt="核心公式"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#亏损函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Cost</span><span class="params">(X, y, theta)</span>:</span></span><br><span class="line">    inner = np.power(((X * theta.T) - y), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> np.sum(inner) / (<span class="number">2</span> * len(X))</span><br><span class="line"></span><br><span class="line"><span class="comment">#梯度下降寻求最合适拟合参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_decent</span><span class="params">(X,y,theta,alpha,iters)</span>:</span></span><br><span class="line">    temp = np.matrix(np.zeros(theta.shape))</span><br><span class="line">    parameters = int(theta.ravel().shape[<span class="number">1</span>])</span><br><span class="line">    cost = np.zeros(iters)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(iters):</span><br><span class="line">        error = (X*theta.T)-y</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(parameters):</span><br><span class="line">            term = np.multiply(error,X[:,j])</span><br><span class="line">            temp[<span class="number">0</span>,j] = theta[<span class="number">0</span>,j]-((alpha / len(X)) * np.sum(term))</span><br><span class="line"></span><br><span class="line">        theta = temp</span><br><span class="line">        cost[i] = Cost(X,y,theta)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> theta,cost</span><br><span class="line"></span><br><span class="line">path = <span class="string">'C:/Users/Lenovo/Desktop/MLdata/ex1/ex1data1.txt'</span></span><br><span class="line">data = pd.read_csv(path,header=<span class="literal">None</span>,names=[<span class="string">'population'</span>,<span class="string">'profit'</span>])</span><br><span class="line">data.head()</span><br><span class="line"></span><br><span class="line">data.insert(<span class="number">0</span>, <span class="string">'Ones'</span>, <span class="number">1</span>)</span><br><span class="line">cols = data.shape[<span class="number">1</span>]</span><br><span class="line">X = data.iloc[:,:<span class="number">-1</span>]</span><br><span class="line">y = data.iloc[:,cols<span class="number">-1</span>:cols]</span><br><span class="line"></span><br><span class="line">X = np.matrix(X.values)</span><br><span class="line">y = np.matrix(y.values)</span><br><span class="line"></span><br><span class="line">theta = np.matrix(np.array([<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line">print(Cost(X, y, theta))</span><br><span class="line">print(theta.shape)</span><br><span class="line"></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">iters = <span class="number">1000000</span></span><br><span class="line">g, cost = gradient_decent(X, y, theta, alpha, iters)</span><br><span class="line">print(g)</span><br><span class="line">predict1 = [<span class="number">1</span>,<span class="number">3.5</span>]*g.T</span><br><span class="line">print(<span class="string">"predict1:"</span>,predict1)</span><br><span class="line">predict2 = [<span class="number">1</span>,<span class="number">7</span>]*g.T</span><br><span class="line">print(<span class="string">"predict2:"</span>,predict2)</span><br><span class="line">x = np.linspace(data.population.min(), data.population.max(), <span class="number">100</span>)</span><br><span class="line">f = g[<span class="number">0</span>, <span class="number">0</span>] + (g[<span class="number">0</span>, <span class="number">1</span>] * x)</span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.plot(x, f, <span class="string">'r'</span>, label=<span class="string">'Prediction'</span>)</span><br><span class="line">ax.scatter(data.population, data.profit, label=<span class="string">'Traning Data'</span>)</span><br><span class="line">ax.legend(loc=<span class="number">2</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'Population'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Profit'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Predicted Profit vs. Population Size'</span>)</span><br><span class="line">plt.show()</span><br><span class="line">​</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>About  Me</title>
    <url>/2020/03/27/About/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>姓名：张玉想<br>性别：男<br>现居地：江西南昌<br>职业：东华理工大学 | 计算机科学与技术 | 本科<br>爱好：人工智能 | 计算机视觉 | 摄影 | 旅行<br>github: <a href="https://github.com/zyx-cv" target="_blank" rel="noopener">https://github.com/zyx-cv</a><br>QQ：1300281401(非诚勿扰)<br>哔哩哔哩：Shutterbug张<br>图虫：Shutterbug张<br>CSDN：小张小张,考试不慌</p>
]]></content>
  </entry>
</search>
